name: Build Projects

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: "0 0 * * 1"

env:
  test_roots: |
    app/backplane/deployment_module
    app/backplane/power_module
    app/backplane/radio_module
    app/backplane/sensor_module
  platforms: |
    nucleo_f446re
    deployment_module
    radio_module
    sensor_module
    power_module
  linux_only_platforms: |
    native_sim

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: FSW

      - name: Compute Cache Hashes
        id: compute_hashes
        shell: bash
        run: |
          echo "APT_HASH=${{ hashFiles('FSW/.github/workflows/build.yml') }}" >> $GITHUB_ENV
          echo "BREW_HASH=${{ hashFiles('FSW/.github/workflows/build.yml') }}" >> $GITHUB_ENV
          echo "VCPKG_HASH=${{ hashFiles('FSW/.github/workflows/build.yml') }}" >> $GITHUB_ENV
          echo "PYTHON_HASH=${{ hashFiles('**/requirements.txt', '**/*requirements*.txt') }}" >> $GITHUB_ENV
          echo "ZEPHYR_HASH=${{ hashFiles('FSW/west.yml', 'FSW/zephyr/module.yml') }}" >> $GITHUB_ENV
          echo "SDK_HASH=${{ hashFiles('FSW/west.yml') }}" >> $GITHUB_ENV
          echo "CMAKE_HASH=${{ hashFiles('FSW/**/CMakeLists.txt', 'FSW/**/*.cmake', 'FSW/cmake/**') }}" >> $GITHUB_ENV

      - name: Cache APT packages (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        id: apt-cache
        with:
          path: ~/.apt-cache
          key: apt-${{ runner.os }}-${{ env.APT_HASH }}
          restore-keys: |
            apt-${{ runner.os }}-

      - name: Install Native Sim Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          if [ -d ~/.apt-cache ] && [ "$(ls -A ~/.apt-cache)" ]; then
            sudo cp -r ~/.apt-cache/* /var/cache/apt/archives/
          fi
          mkdir -p ~/.apt-cache
          sudo apt install -y pkg-config libfuse-dev:i386 gcc-multilib g++-multilib
          sudo cp -r /var/cache/apt/archives/*.deb ~/.apt-cache/ || true

      - name: Cache Homebrew (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        id: brew-cache
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: brew-${{ runner.os }}-${{ env.BREW_HASH }}
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Cache vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          path: |
            C:/vcpkg/installed
            C:/vcpkg/packages
            C:/vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ env.VCPKG_HASH }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: "pip"

      - name: Cache Zephyr dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/west
            ~/.cache/zephyr
            ~/.west
            modules
          key: zephyr-${{ runner.os }}-${{ env.ZEPHYR_HASH }}
          restore-keys: |
            zephyr-${{ runner.os }}-

      - name: Cache SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/zephyr-sdk
          key: sdk-${{ runner.os }}-${{ env.SDK_HASH }}
          restore-keys: |
            sdk-${{ runner.os }}-

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: FSW/build
          key: cmake-${{ runner.os }}-${{ env.CMAKE_HASH }}
          restore-keys: |
            cmake-${{ runner.os }}-

      - name: Setup Zephyr project
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: FSW
          toolchains: arm-zephyr-eabi

      - name: Build firmware
        working-directory: FSW
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            EXTRA_TWISTER_FLAGS="--short-build-path -O/tmp/twister-out"
          fi
          
          if [ "${{ runner.os }}" = "Linux" ]; then
            export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
          fi
          
          function add_arglist () {
            echo "$2" | while read -r line; do
              [ -z "$line" ] && continue
              echo -n " $1 $line "
            done;
          }       
          
          west twister $(add_arglist -T "${{ env.test_roots }}") $(add_arglist -p "${{ env.platforms }}") $(if [ "${{ runner.os }}" = "Linux" ]; then add_arglist -p "${{ env.linux_only_platforms }}"; fi) -v --inline-logs --integration $EXTRA_TWISTER_FLAGS
