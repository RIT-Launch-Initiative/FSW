name: Build Samples

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'
  schedule:
    - cron: "0 0 * * 1"

env:
  test_roots: |
    app/samples/littlefs
    app/samples/sensor
    app/samples/shield_blinky
    app/samples/shield_mcp3561r
    app/samples/lora_bcast
    app/samples/udp_bcast
    app/samples/message_passing
    app/samples/openrocket_sensors
    app/samples/soft_timer
    app/samples/tenants_and_tasks
    app/samples/tftp_server
    app/samples/datalogger
    app/samples/gpio_blinky
    app/samples/phase_detection
    app/samples/horus

  platforms: |
    nucleo_f446re
    radio_module
    sensor_module
    power_module
    deployment_module
  linux_only_platforms: |
    native_sim

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: FSW

      - name: Cache APT packages (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        id: apt-cache
        with:
          path: ~/.apt-cache
          key: apt-samples-${{ runner.os }}-${{ hashFiles('FSW/.github/workflows/build_samples.yml') }}
          restore-keys: |
            apt-samples-${{ runner.os }}-

      - name: Install Native Sim Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update
          if [ -d ~/.apt-cache ] && [ "$(ls -A ~/.apt-cache)" ]; then
            sudo cp -r ~/.apt-cache/* /var/cache/apt/archives/
          fi
          mkdir -p ~/.apt-cache
          sudo apt install -y pkg-config libfuse-dev:i386 gcc-multilib g++-multilib
          sudo cp -r /var/cache/apt/archives/*.deb ~/.apt-cache/ || true

      - name: Cache Homebrew (macOS)
        if: runner.os == 'macOS'
        uses: actions/cache@v4
        id: brew-cache
        with:
          path: |
            ~/Library/Caches/Homebrew
            /usr/local/Homebrew
          key: brew-samples-${{ runner.os }}-${{ hashFiles('FSW/.github/workflows/build_samples.yml') }}
          restore-keys: |
            brew-samples-${{ runner.os }}-

      - name: Cache vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: actions/cache@v4
        id: vcpkg-cache
        with:
          path: |
            C:/vcpkg/installed
            C:/vcpkg/packages
            C:/vcpkg/downloads
          key: vcpkg-samples-${{ runner.os }}-${{ hashFiles('FSW/.github/workflows/build_samples.yml') }}
          restore-keys: |
            vcpkg-samples-${{ runner.os }}-

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python3.12/site-packages
            ~/AppData/Local/pip/Cache
          key: python-samples-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/*requirements*.txt') }}
          restore-keys: |
            python-samples-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache Zephyr dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/west
            ~/.cache/zephyr
            ~/.west
            modules
          key: zephyr-samples-${{ runner.os }}-${{ hashFiles('FSW/west.yml', 'FSW/zephyr/module.yml') }}
          restore-keys: |
            zephyr-samples-${{ runner.os }}-

      - name: Cache SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/zephyr-sdk
          key: sdk-samples-${{ runner.os }}-${{ hashFiles('FSW/west.yml') }}
          restore-keys: |
            sdk-samples-${{ runner.os }}-

      - name: Cache CMake build
        uses: actions/cache@v4
        with:
          path: build
          key: cmake-samples-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake', 'cmake/**') }}
          restore-keys: |
            cmake-samples-${{ runner.os }}-

      - name: Setup Zephyr project
        uses: zephyrproject-rtos/action-zephyr-setup@v1
        with:
          app-path: FSW
          toolchains: arm-zephyr-eabi

      - name: Build firmware
        working-directory: FSW
        shell: bash
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            EXTRA_TWISTER_FLAGS="--short-build-path -O/tmp/twister-out"
          fi

          if [ "${{ runner.os }}" = "Linux" ]; then
            export PKG_CONFIG_PATH=/usr/lib/i386-linux-gnu/pkgconfig
          fi

          function add_arglist () {
            echo "$2" | while read -r line; do
              [ -z "$line" ] && continue
              echo -n " $1 $line "
            done;
          }       
          
          west twister $(add_arglist -T "${{ env.test_roots}}") $(add_arglist -p "${{ env.platforms }}") $(if [ "${{ runner.os }}" = "Linux" ]; then add_arglist -p "${{ env.linux_only_platforms}}"; fi) -v --inline-logs --integration $EXTRA_TWISTER_FLAGS
