
// Total 4 Seconds
// .5  seconds extra (preboost + during detection)
// 1.6 seconds burn
// 0.9 seconds extra into boost
// 1 extra second to account for uc time not being real time

constexpr size_t calc_bytes(size_t seconds, size_t per_second, size_t packet_size) {
    return seconds * per_second * packet_size;
}

constexpr size_t num_seconds = 4;
constexpr size_t packets_per_second = 100;
constexpr size_t packet_size = sizeof(SuperFastPacket);
constexpr size_t num_bytes = num_seconds * packets_per_second * packet_size;
static_assert(num_bytes % 256 == 0, "Man it just should");
constexpr size_t w25_page_size = 256;
constexpr size_t num_pages = num_bytes / w25_page_size;
constexpr size_t num_kilobytes = num_bytes / 1024;

constexpr size_t time_on_pad_seconds = 5 * 60 * 60;
constexpr size_t time_on_pad_pages = packets_per_second * time_on_pad_seconds;
constexpr size_t rewrites = time_on_pad_pages / num_pages;

struct SuperNormalPacket {
    uint64_t timestamp;
    float press;
    float temp;
    acc_data acc[2];
    gyro_data g[2];
};

constexpr size_t normal_packet_size = sizeof(SuperNormalPacket);
constexpr size_t packets_per_sec_coast = 100;
constexpr size_t num_seconds_coast = 400;
constexpr size_t coast_bytes = num_seconds_coast * packets_per_sec_coast * normal_packet_size;
constexpr size_t num_kilobytes_coast = coast_bytes / 1024;
// fast packet size = 256

struct shuntdata {
    float volt;
    float current;
};

struct SlowFlightPacket {
    uint64_t timestamp;
    shuntdata total;
    shuntdata pump;

    navigation_data nav_data;
    gnss_time timesync_time;
};

constexpr size_t slowflight_bytes = calc_bytes(400, 1, sizeof(SlowFlightPacket));
constexpr size_t slowflight_kb = slowflight_bytes / 1024;

struct SuperSlowPacket {
    uint64_t timestamp;
    shuntdata total;
    shuntdata pump;

    navigation_data nav_data;

    gnss_time timesync_time;
    float clock_skew;
    acc_data wheredyacomefromwheredyagowheredyoucomefrom;
    uint8_t radio_temp;
};

constexpr size_t slow_packet_size = sizeof(SuperSlowPacket);
constexpr size_t num_seconds_reco = 60 * 60 * 12;
constexpr size_t reco_bytes = num_seconds_reco * slow_packet_size;
constexpr size_t reco_kb = reco_bytes / 1024;
